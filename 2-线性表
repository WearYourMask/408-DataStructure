1. 指针的回顾：现有一int型变量int a = 3，有一int型指针int * b，且int * b = a。则*b = 3，b = &a。

2. 单链表结点的定义
        typedef struct LNode{
                Elemtype data;
                struct LNode *next;
                }LNode, *LinkList
对于这个定义，我们应知晓
        2.1 LinkList与LNode *是等价的。前者表示这是一个线性表，后者表示这是一个结点。
        2.2 使用了typedef，正常的写法是
                struct LNode{
                        Elemtype data;
                        strutc LNode *next
                        }
                typedef struct LNode LNode;
                typedef struct LNode *LinkList；
                
3.使用头插法和尾插法建立单链表
        3.1 头插法（带头结点）
                LinkList List_HeadInsert{LinkeList &L}{
                     LNode *s;
                     int x;
                     
                     // 创建头结点，指针类型为LinkList
                     L = (LinkList) malloc(sizeof(LNode));
                     // 初始化链表
                     L -> = NULL;
                     // 输入节点的值
                     scanf("%d", &x);
                     
                     while(x != 9999){
                        s = (LNode* ) malloc(sizeof(LNode)); // 注意与之前初始化时指针强制转换的类型不同，这次想强调的是这是初始化一个结点
                        s -> data = x;
                        s -> = L -> next;
                        L -> next = s;
                        scanf("%d", &x);
                     }
                     return L;
                }
        3.2 尾插法
                LinkList List_TailInsert(LinkList &L){
                int x;
                L = (LinkList) malloc(sizeof(LNode));
                LNode *s, *r = L; // *r是表尾指针
                scanf("%d", &x);
                
                while(x != 9999){
                        s = (LNode) malloc(sizeof(LNode));
                        s -> data = x;
                        r ->next = s; // 注意这里，因为已经将s赋给了L指针指向的节点，所以r在下一步可以进行移动
                        r = s;
                        scanf("%d", &x);
                }
                r -> next = NULL;
                return L;
                }
        
4. 查找
        4.1 按序号查找值：以表头开始顺序查找，直到第i个节点为止。若没有第i个节点，则返回最后一个节点的指针与 Null。
		LNode * GetElem(LinkList L, int i){
			int j = 1; //计数器
			LNode *p = L -> next;
			
			//为保证代码的健壮性，现在分别考虑输入的值为0与小于0的情况
			if (i == 0)
				return L;
			if (i < 1)
				return NULL;

			// 开始寻找
			while (p && j < i){
				p = p -> next;
				j++;
			}
			return L;
		}
	4.2 按元素返回序号：以表头开始顺序查找，依次对比数据域中的数据直到找到并返回其指针，若没有则返回NULL。
		LNode * LocateElem(LinkList L, ElemType e){
			LNode *p = L -> next;
			while (p -> data != e && p != NULL) // 注意：有些数据类型并不支持使用“!=”进行比较
				p = p -> next;
			return p;
		}

5. 插入与删除
	5.1 插入节点：首先处理后面的节点，再处理前面的节点，顺序并不能够颠倒。在想要插入的节点i的前一个结点上进行后插操作。
		LNode * InsertElem(LinkList &L, int i-1){
			// 注意：使用GetElem时，会检查位置的合法性
			LNode * p = GetElem(L, i-1);

			// ...定义新插入的节点*s...
			s -> next = p -> next;
			p -> next = s;
		}
	5.2 删除节点
		5.2.1 使用前驱节点删除（代码片段，整体结构见5.1）
			// ...*p指向被删除结点的前一个结点，*q指向被删除的结点
			p = GetElem(L, i-1);
			q = p -> next;
			p -> next = q -> next;
			free(q);
		5.2.2 直接将后继节点赋给需要删除的结点（删除需要删除的结点的后继节点），这种方法的时间复杂度是O(1)
			// ...*q指向当前删除的结点，*p指向需要删除节点的后继结点
			q = p -> next;
			p -> data = p -> next -> data;
			p -> next = q -> next;
			free(q);
		5.2.3
	
