1. 指针的回顾：现有一int型变量int a = 3，有一int型指针int * b，且int * b = a。则*b = 3，b = &a。

2. 单链表结点的定义
        typedef struct LNode{
                Elemtype data;
                struct LNode *next;
                }LNode, *LinkList
对于这个定义，我们应知晓
        2.1 LinkList与LNode *是等价的。前者表示这是一个线性表，后者表示这是一个结点。
        2.2 使用了typedef，正常的写法是
                struct LNode{
                        Elemtype data;
                        strutc LNode *next
                        }
                typedef struct LNode LNode;
                typedef struct LNode *LinkList；
                
3.使用头插法和尾插法建立单链表
        3.1 头插法（带头结点）
                LinkList List_HeadInsert{LinkeList &L}{
                     LNode *s;
                     int x;
                     
                     // 创建头结点，指针类型为LinkList
                     L = (LinkList) malloc(sizeof(LNode));
                     // 初始化链表
                     L -> = NULL;
                     // 输入节点的值
                     scanf("%d", &x);
                     
                     while(x != 9999){
                        s = (LNode* ) malloc(sizeof(LNode)); // 注意与之前初始化时指针强制转换的类型不同，这次想强调的是这是初始化一个结点
                        s -> data = x;
                        s -> = L -> next;
                        L -> next = s;
                        scanf("%d", &x);
                     }
                     return L;
                }
        3.2 尾插法
                LinkList List_TailInsert(LinkList &L){
                int x;
                L = (LinkList) malloc(sizeof(LNode));
                
                
                }
        
